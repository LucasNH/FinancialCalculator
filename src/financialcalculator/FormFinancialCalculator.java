/*
FormFinancialCalculator.java 
Created by: Lucas Noritomi-Hartwig
Created on: June 1, 2020
Last edited on: June 19, 2020

This program will take appropriate numeric and choice inputs from a user, and will
use financial equations to solve for a specific unknown variable. The program is capable
of working with both simple and compound interest.

The project will achieve the ability to help users gain a grasp on their financial 
situation by providing an easy to use calculator designed to enhance their understanding, 
giving the user more confidence in making financial decisions.

The user is required to input relevant information about the investment/debt, 
based on which variable in the equation they may be looking for.

In uncertain times, when macro and micro economics are not as stable as usual, 
and even in more stable periods, it is a general need for individuals and organizations, 
whether small or large, to understand their finances adequately, which would allow 
them to make more informed and responsible decisions. In the world of finance, 
these decisions affect everyone, so it is important that the best ones are made.

It is a common misconception that finances are too complicated for everyone, or 
a majority to properly understand, and so when some are approached with the idea 
that it is a good idea to be educated in this field in particular, they will likely 
protest and argue against it. The hope is that, with the use of this program, people 
will be able to reconsider, and realize for themselves that understanding their 
finances is not as difficult as it may seem, is more helpful than they may have 
imagined, and some might even begin to enjoy the subject.

This project is important to me because for a while, I began to develop a great 
interest (pun intended) in the world of finance. Choosing to move forward with 
this project will allow me to combine my appreciation of computer science with finance.
 */
package financialcalculator;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;

public class FormFinancialCalculator extends javax.swing.JFrame {

    ArrayList<String> results = new ArrayList();
    String simpleFormulaLegend = "Principal Value = P\nInterest Rate = r\nFuture Value = A"
            + "\nTime = t\nInterest Value = I";

    public FormFinancialCalculator() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int width = (dim.width - this.getSize().width) / 2;
        int height = (dim.height - this.getSize().height) / 2;
        this.setLocation(width, height);
        principalValueButton.setEnabled(false);
        interestRateButton.setEnabled(false);
        futureValueButton.setEnabled(false);
        timeButton.setEnabled(false);
        interestValueButton.setEnabled(false);
        annuityButton.setEnabled(false);
        principalValueInput.setEnabled(false);
        interestRateInput.setEnabled(false);
        futureValueInput.setEnabled(false);
        timeInput.setEnabled(false);
        interestValueInput.setEnabled(false);
        annuityInput.setEnabled(false);
        compoundFrequencyInput.setEnabled(false);
        calculateButton.setEnabled(false);
        resetCompoundFrequecnyInput();
        output.setEnabled(false);
        formulaDisplay.setEnabled(false);
        clearButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calculation = new javax.swing.ButtonGroup();
        intrestType = new javax.swing.ButtonGroup();
        timeSetting = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        principalValueButton = new javax.swing.JRadioButton();
        timeButton = new javax.swing.JRadioButton();
        interestRateButton = new javax.swing.JRadioButton();
        annuityButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        simpleInterestButton = new javax.swing.JRadioButton();
        compoundInterestButton = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        interestValueButton = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        futureValueInput = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        timeInput = new javax.swing.JTextField();
        principalValueInput = new javax.swing.JTextField();
        interestRateInput = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        futureValueButton = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        annuityInput = new javax.swing.JTextField();
        calculateButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        interestValueInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        compoundFrequencyInput = new java.awt.Choice();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        formulaDisplay = new javax.swing.JTextArea();
        clearButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Principal Value ($)");

        jLabel2.setText("Interest Rate (dec.)");

        jLabel3.setText("Calculating for:");

        calculation.add(principalValueButton);
        principalValueButton.setText("Principal Value");
        principalValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principalValueButtonActionPerformed(evt);
            }
        });

        calculation.add(timeButton);
        timeButton.setText("Time");
        timeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeButtonActionPerformed(evt);
            }
        });

        calculation.add(interestRateButton);
        interestRateButton.setText("Interest Rate");
        interestRateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interestRateButtonActionPerformed(evt);
            }
        });

        calculation.add(annuityButton);
        annuityButton.setText("Annuity");
        annuityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annuityButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Intrest Type:");

        intrestType.add(simpleInterestButton);
        simpleInterestButton.setText("Simple Interest");
        simpleInterestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleInterestButtonActionPerformed(evt);
            }
        });

        intrestType.add(compoundInterestButton);
        compoundInterestButton.setText("Compound Interest");
        compoundInterestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compoundInterestButtonActionPerformed(evt);
            }
        });

        calculation.add(interestValueButton);
        interestValueButton.setText("Interest Value");
        interestValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interestValueButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Future Value ($)");

        jLabel6.setText("Time (years)");

        jLabel7.setText("Compound Frequency");

        calculation.add(futureValueButton);
        futureValueButton.setText("Future Value");
        futureValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                futureValueButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Annuity ($)");

        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Result:");

        jLabel10.setText("Interest Value ($)");

        output.setEditable(false);
        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        jLabel11.setText("Formula:");

        formulaDisplay.setEditable(false);
        formulaDisplay.setColumns(20);
        formulaDisplay.setRows(5);
        jScrollPane2.setViewportView(formulaDisplay);

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel12.setText("(Simple Interest always annually, in years)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(principalValueButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(interestRateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(futureValueButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(interestValueButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(annuityButton))
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(simpleInterestButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(compoundInterestButton)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12)))
                        .addContainerGap(11, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel10))
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(principalValueInput)
                                            .addComponent(interestValueInput, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                            .addComponent(futureValueInput, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                            .addComponent(interestRateInput, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                            .addComponent(calculateButton)
                                            .addComponent(timeInput, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                            .addComponent(compoundFrequencyInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(annuityInput, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel9)))
                                .addGap(10, 10, 10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(clearButton)
                                .addGap(101, 101, 101))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simpleInterestButton)
                    .addComponent(compoundInterestButton)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeButton)
                    .addComponent(interestRateButton)
                    .addComponent(annuityButton)
                    .addComponent(principalValueButton)
                    .addComponent(futureValueButton)
                    .addComponent(interestValueButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(principalValueInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(interestRateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(futureValueInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(timeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(interestValueInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(annuityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(compoundFrequencyInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(19, 19, 19)
                                .addComponent(calculateButton))
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearButton)
                        .addGap(0, 25, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jMenu1.setText("File");

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        principalValueInput.setText(null);
        interestRateInput.setText(null);
        futureValueInput.setText(null);
        timeInput.setText(null);
        interestValueInput.setText(null);
        annuityInput.setText(null);
        resetCompoundFrequecnyInput();
        output.setText(null);
        clearButton.setEnabled(false);
        results.clear();
        formula();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        String result = null;
        if (simpleInterestButton.isSelected()) { // Simple interest calculations
            if (principalValueButton.isSelected()) { // Principal value
                DecimalFormat x = new DecimalFormat("$0.00");
                double P = 0;
                result = x.format(simplePrincipalValue(P));
            } else if (interestRateButton.isSelected()) { // Interest rate
                DecimalFormat x = new DecimalFormat("0.00%");
                if (timeInput.getText().length() != 0) { // Checking for common variable(s)
                    double r = 0;
                    result = x.format(simpleInterestRate(r));
                } else {
                    result = "Please input a time.";
                }
            } else if (futureValueButton.isSelected()) { // Future value
                DecimalFormat x = new DecimalFormat("$0.00");
                double A = 0;
                result = x.format(simpleFutureValue(A));
            } else if (timeButton.isSelected()) { // Time
                DecimalFormat x = new DecimalFormat("0 years");
                if (interestRateInput.getText().length() != 0) { // Checking for common variable(s)
                    double t = 0;
                    result = x.format(simpleTime(t));
                    if (result.equals("1.0 years")) { // Singular
                        result = "1.0 year";
                    }
                } else {
                    result = "Please input an interest rate.";
                }
            } else if (interestValueButton.isSelected()) { // Interest value
                DecimalFormat x = new DecimalFormat("$0.00");
                if (principalValueInput.getText().length() != 0) { // Checking for common variable(s)
                    double I = 0;
                    result = x.format(simpleInterestValue(I));
                } else {
                    result = "Please input a principal value.";
                }
            }
        } else if (compoundInterestButton.isSelected()) { // Compound interest calculations
            if (principalValueButton.isSelected()) { // Principal value
                DecimalFormat x = new DecimalFormat("$0.00");
                double P = 0;
                result = x.format(compoundPrincipalValue(P));
            } else if (interestRateButton.isSelected()) { // Interest rate
                DecimalFormat x = new DecimalFormat("0.00%");
                if (principalValueInput.getText().length() != 0 && futureValueInput.getText().length() != 0
                        && timeInput.getText().length() != 0) { // Checking for common variable(s)
                    double r = 0;
                    result = x.format(compoundInterestRate(r));
                } else {
                    result = "Please input a principal value,\nfuture value, and time.";
                }
            } else if (futureValueButton.isSelected()) { // Future value
                DecimalFormat x = new DecimalFormat("$0.00");
                double A = 0;
                result = x.format(compoundFutureValue(A));
            } else if (timeButton.isSelected()) {
                if (interestRateInput.getText().length() != 0) { // Checking for common variable(s)
                    switch (compoundFrequencyInput.getSelectedIndex()) {
                        case 0: { // Annually
                            DecimalFormat x = new DecimalFormat("0.0 years");
                            double t = 0;
                            result = x.format(compoundTime(t));
                            if (result.equals("1.0 years")) { // Singular
                                result = "1.0 year";
                            }
                            break;
                        }
                        case 1: { // Semi-annually
                            DecimalFormat x = new DecimalFormat("0.0 semesters");
                            double t = 0;
                            result = x.format(compoundTime(t));
                            if (result.equals("1.0 semesters")) { // Singular
                                result = "1.0 semester";
                            }
                            break;
                        }
                        case 2: { // Quarterly
                            DecimalFormat x = new DecimalFormat("0.0 quarters");
                            double t = 0;
                            result = x.format(compoundTime(t));
                            if (result.equals("1.0 quarters")) { // Singular
                                result = "1.0 quarter";
                            }
                            break;
                        }
                        case 3: { // Monthly
                            DecimalFormat x = new DecimalFormat("0.0 months");
                            double t = 0;
                            result = x.format(compoundTime(t));
                            if (result.equals("1.0 months")) { // Singular
                                result = "1.0 month";
                            }
                            break;
                        }
                        case 4: { // Bi-weekly
                            DecimalFormat x = new DecimalFormat("0.0 bi-weeks");
                            double t = 0;
                            result = x.format(compoundTime(t));
                            if (result.equals("1.0 bi-weeks")) { // Singular
                                result = "1.0 bi-week";
                            }
                            break;
                        }
                        case 5: { // Weekly
                            DecimalFormat x = new DecimalFormat("0.0 weeks");
                            double t = 0;
                            result = x.format(compoundTime(t));
                            if (result.equals("1.0 weeks")) { // Singular
                                result = "1.0 week";
                            }
                            break;
                        }
                        case 6: { // Daily
                            DecimalFormat x = new DecimalFormat("0 days");
                            double t = 0;
                            result = x.format(Math.ceil(compoundTime(t)));
                            if (result.equals("1 days")) { // Singular
                                result = "1 day";
                            }
                            break;
                        }
                        default:
                            break;
                    }
                } else {
                    result = "Please input an interest rate.";
                }
            } else if (interestValueButton.isSelected()) { // Interest value
                DecimalFormat x = new DecimalFormat("$0.00");
                double I = 0;
                result = x.format(compoundInterestValue(I));
            } else if (annuityButton.isSelected()) { // Annuity
                DecimalFormat x = new DecimalFormat("$0.00");
                if (interestRateInput.getText().length() != 0 && timeInput.getText().length() != 0) { // Checking for common variable(s)
                    double R = 0;
                    result = x.format(compoundAnnuity(R));
                } else {
                    result = "Please input an interest rate and\na time.";
                }
            }
        }
        output.setEnabled(true);
        Collections.addAll(results, result);
        output.setText(null);
        results.stream().forEach((element) -> { // For each element in results arraylist
            output.append(element + "\n"); // Output elemtent to output text area
        });
        clearButton.setEnabled(true);
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void futureValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_futureValueButtonActionPerformed
        // Disabling and clearing input field of variable being searched for, and enabling all other vald input fields
        principalValueInput.setEnabled(true);
        interestRateInput.setEnabled(true);
        futureValueInput.setEnabled(false);
        futureValueInput.setText(null);
        timeInput.setEnabled(true);
        interestValueInput.setEnabled(true);
        calculateButton.setEnabled(true);
        if (simpleInterestButton.isSelected()) {
            simpleIntrestSettings();
        } else {
            compoundInterestSettings();
        }
        formula();
    }//GEN-LAST:event_futureValueButtonActionPerformed

    private void interestValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interestValueButtonActionPerformed
        // Disabling and clearing input field of variable being searched for, and enabling all other vald input fields
        principalValueInput.setEnabled(true);
        interestRateInput.setEnabled(true);
        futureValueInput.setEnabled(true);
        timeInput.setEnabled(true);
        interestValueInput.setEnabled(false);
        interestValueInput.setText(null);
        calculateButton.setEnabled(true);
        if (simpleInterestButton.isSelected()) {
            simpleIntrestSettings();
        } else {
            compoundInterestSettings();
        }
        formula();
    }//GEN-LAST:event_interestValueButtonActionPerformed

    private void compoundInterestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compoundInterestButtonActionPerformed
        generalInterestSettings();
    }//GEN-LAST:event_compoundInterestButtonActionPerformed

    private void simpleInterestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleInterestButtonActionPerformed
        generalInterestSettings();
        annuityButton.setEnabled(false);
    }//GEN-LAST:event_simpleInterestButtonActionPerformed

    private void annuityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annuityButtonActionPerformed
        // Disabling and clearing input field of variable being searched for, and enabling all other vald input fields
        principalValueInput.setEnabled(true);
        interestRateInput.setEnabled(true);
        futureValueInput.setEnabled(true);
        timeInput.setEnabled(true);
        interestValueInput.setEnabled(true);
        annuityInput.setEnabled(false);
        annuityInput.setText(null);
        compoundFrequencyInput.setEnabled(true);
        calculateButton.setEnabled(true);
        formula();
    }//GEN-LAST:event_annuityButtonActionPerformed

    private void interestRateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interestRateButtonActionPerformed
        // Disabling and clearing input field of variable being searched for, and enabling all other vald input fields
        principalValueInput.setEnabled(true);
        interestRateInput.setEnabled(false);
        interestRateInput.setText(null);
        futureValueInput.setEnabled(true);
        timeInput.setEnabled(true);
        interestValueInput.setEnabled(true);
        calculateButton.setEnabled(true);
        if (simpleInterestButton.isSelected()) {
            simpleIntrestSettings();
        } else {
            compoundInterestSettings();
        }
        formula();
    }//GEN-LAST:event_interestRateButtonActionPerformed

    private void timeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeButtonActionPerformed
        // Disabling and clearing input field of variable being searched for, and enabling all other vald input fields
        principalValueInput.setEnabled(true);
        interestRateInput.setEnabled(true);
        futureValueInput.setEnabled(true);
        timeInput.setEnabled(false);
        timeInput.setText(null);
        interestValueInput.setEnabled(true);
        calculateButton.setEnabled(true);
        if (simpleInterestButton.isSelected()) {
            simpleIntrestSettings();
        } else {
            compoundInterestSettings();
        }
        formula();
    }//GEN-LAST:event_timeButtonActionPerformed

    private void principalValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_principalValueButtonActionPerformed
        // Disabling and clearing input field of variable being searched for, and enabling all other vald input fields
        principalValueInput.setEnabled(false);
        principalValueInput.setText(null);
        interestRateInput.setEnabled(true);
        futureValueInput.setEnabled(true);
        timeInput.setEnabled(true);
        interestValueInput.setEnabled(true);
        calculateButton.setEnabled(true);
        if (simpleInterestButton.isSelected()) {
            simpleIntrestSettings();
        } else {
            compoundInterestSettings();
        }
        formula();
    }//GEN-LAST:event_principalValueButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private double simplePrincipalValue(double P) { // Calculations for principal value using simple interest
        if (futureValueInput.getText().length() != 0 && interestValueInput.getText().length() != 0) {
            double A = Double.parseDouble(futureValueInput.getText());
            double I = Double.parseDouble(interestValueInput.getText());
            P = A - I; // Formula derived from: A = P + I
            formulaDisplay.setText(simpleFormulaLegend + "\n\nP = A - I"); // Stating used formula
        } else if (interestValueInput.getText().length() != 0 && interestRateInput.getText().length() != 0
                && timeInput.getText().length() != 0) {
            double r = Double.parseDouble(interestRateInput.getText());
            double t = Double.parseDouble(timeInput.getText());
            double I = Double.parseDouble(interestValueInput.getText());
            P = I / (r * t); // Formula derived from: I = Prt
            formulaDisplay.setText(simpleFormulaLegend + "\n\nP = I / (r * t)"); // Stating used formula
        } else if (futureValueInput.getText().length() != 0 && interestRateInput.getText().length() != 0
                && timeInput.getText().length() != 0) {
            double A = Double.parseDouble(futureValueInput.getText());
            double r = Double.parseDouble(interestRateInput.getText());
            double t = Double.parseDouble(timeInput.getText());
            P = A / (1 + r * t); // Formula derived from: A = P + P(r*t) A = P(1+r*t)
            formulaDisplay.setText(simpleFormulaLegend + "\n\nP = A / (1 + r * t)"); // Stating used formula
        }
        return P;
    }

    private double simpleInterestRate(double r) { // Calculations for interest rate using simple interest
        double t = Double.parseDouble(timeInput.getText());
        if (interestValueInput.getText().length() != 0 && principalValueInput.getText().length() != 0
                && timeInput.getText().length() != 0) {
            double P = Double.parseDouble(principalValueInput.getText());
            double I = Double.parseDouble(interestValueInput.getText());
            r = I / (P * t); // Formula derived from: I = Prt
            formulaDisplay.setText(simpleFormulaLegend + "\n\nr = I / (P * t)"); // Stating used formula
        } else if (futureValueInput.getText().length() != 0 && principalValueInput.getText().length() != 0
                && timeInput.getText().length() != 0) {
            double A = Double.parseDouble(futureValueInput.getText());
            double P = Double.parseDouble(principalValueInput.getText());
            r = ((A / P) - 1) / t; // Formula derived from: A = P + P(r*t) -> A = P(1+r*t)
            formulaDisplay.setText(simpleFormulaLegend + "\n\nr = (A / P - 1) / t"); // Stating used formula
        } else if (futureValueInput.getText().length() != 0 && timeInput.getText().length() != 0
                && interestValueInput.getText().length() != 0) {
            double A = Double.parseDouble(futureValueInput.getText());
            double I = Double.parseDouble(interestValueInput.getText());
            r = (I / t) / (A - I); // Formula derived from: A = (I/t)/r+I
            formulaDisplay.setText(simpleFormulaLegend + "\n\nr = (I / t) / (A - I)"); // Stating used formula
        }
        return r;
    }

    private double simpleFutureValue(double A) { // Calculations for future value using simple interest
        if (principalValueInput.getText().length() != 0 && interestValueInput.getText().length() != 0) {
            double P = Double.parseDouble(principalValueInput.getText());
            double I = Double.parseDouble(interestValueInput.getText());
            A = P + I; // Formula derived from: A = P + I
            formulaDisplay.setText(simpleFormulaLegend + "\n\nA = P + I"); // Stating used formula
        } else if (interestRateInput.getText().length() != 0 && principalValueInput.getText().length() != 0
                && timeInput.getText().length() != 0) {
            double r = Double.parseDouble(interestRateInput.getText());
            double P = Double.parseDouble(principalValueInput.getText());
            double t = Double.parseDouble(timeInput.getText());
            A = P * (1 + r * t); // Formula derived from: A = P + P(r*t) -> A = P(1+r*t)
            formulaDisplay.setText(simpleFormulaLegend + "\n\nA = P + P(r * t) -> A = P(1 + r * t)"); // Stating used formula
        } else if (interestRateInput.getText().length() != 0 && timeInput.getText().length() != 0
                && interestValueInput.getText().length() != 0) {
            double r = Double.parseDouble(interestRateInput.getText());
            double t = Double.parseDouble(timeInput.getText());
            double I = Double.parseDouble(interestValueInput.getText());
            A = (I / t) / r + I; // Formula derived from: A = (I/t)/r+I
            formulaDisplay.setText(simpleFormulaLegend + "\n\nA = (I / t) / r + I"); // Stating used formula
        }
        return A;
    }

    private double simpleTime(double t) { // Calculations for time using simple interest
        double r = Double.parseDouble(interestRateInput.getText());
        if (interestValueInput.getText().length() != 0 && principalValueInput.getText().length() != 0) {
            double P = Double.parseDouble(principalValueInput.getText());
            double I = Double.parseDouble(interestValueInput.getText());
            t = I / (r * P); // Formula derived from: I = Prt
            formulaDisplay.setText(simpleFormulaLegend + "\n\nt = I /(r * P)"); // Stating used formula
        } else if (principalValueInput.getText().length() != 0 && futureValueInput.getText().length() != 0) {
            double P = Double.parseDouble(principalValueInput.getText());
            double A = Double.parseDouble(futureValueInput.getText());
            t = (A / P - 1) / r; // Formula derived from: A = P + P(r*t) -> A = P(1+r*t)
            formulaDisplay.setText(simpleFormulaLegend + "\n\nt = (A / P - 1) / r"); // Stating used formula
        } else if (futureValueInput.getText().length() != 0 && interestValueInput.getText().length() != 0) {
            double A = Double.parseDouble(futureValueInput.getText());
            double I = Double.parseDouble(interestValueInput.getText());
            t = I / (r * (A - I)); // Formula derived from: A = (I/t)/r+I
            formulaDisplay.setText(simpleFormulaLegend + "\n\nt = I / (r * (A - I))"); // Stating used formula
        }
        return t;
    }

    private double simpleInterestValue(double I) { // Calculations for interest value using simple interest
        double P = Double.parseDouble(principalValueInput.getText());
        if (interestRateInput.getText().length() != 0 && timeInput.getText().length() != 0) {
            double r = Double.parseDouble(interestRateInput.getText());
            double t = Double.parseDouble(timeInput.getText());
            I = P * r * t; // Formula derived from: I = Prt
            formulaDisplay.setText(simpleFormulaLegend + "\n\nI = P * r * t"); // Stating used formula
        } else if (futureValueInput.getText().length() != 0) {
            double A = Double.parseDouble(futureValueInput.getText());
            I = A - P; // Formula derived from: A = P + I
            formulaDisplay.setText(simpleFormulaLegend + "\n\nI = A - P"); 
        }
        return I;
    }

    private double compoundPrincipalValue(double P) { // Calculations for principal value using compound interest
        if (futureValueInput.getText().length() != 0 && interestValueInput.getText().length() != 0) {
            double A = Double.parseDouble(futureValueInput.getText());
            double I = Double.parseDouble(interestValueInput.getText());
            P = A - I; // Formula derived from: A = P + I
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = A\nFrequency = f\n\nP = A - I"); // Stating used formula
        } else if (interestRateInput.getText().length() != 0 && futureValueInput.getText().length() != 0
                && timeInput.getText().length() != 0) {
            double r = Double.parseDouble(interestRateInput.getText());
            double A = Double.parseDouble(futureValueInput.getText());
            double t = Double.parseDouble(timeInput.getText());
            int f = switchCaseCompoundFrequencyInput(); // Frequency check
            double i = r / f, n = f * t;
            P = A * Math.pow(1 + i, -n); // Formula derived from: PV = A(1+i)^(-n), i = r/f, n = f*t
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = A\nFrequency = f\n\nP = A(1 + i)^(-n), i = r / f, n = f * t"); // Stating used formula
        } else if (annuityInput.getText().length() != 0 && interestRateInput.getText().length() != 0
                && timeInput.getText().length() != 0) {
            double R = Double.parseDouble(annuityInput.getText());
            double r = Double.parseDouble(interestRateInput.getText());
            double t = Double.parseDouble(timeInput.getText());
            int f = switchCaseCompoundFrequencyInput(); // Frequency check
            double i = r / f, n = f * t;
            P = R * ((1 - Math.pow(1 + i, -n)) / i); // Formula derived from: PV = R((1-(1+i)^-n)/i), i = r/f, n = f*t
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = A\nFrequency = f\n\nP = R((1 - (1 + i)^(-n) / i), i = r / f, n = f * t"); // Stating used formula
        }
        return P;
    }

    private double compoundInterestRate(double r) { // Calculation for interest rate using compound interest
        double P = Double.parseDouble(principalValueInput.getText());
        double A = Double.parseDouble(futureValueInput.getText());
        double t = Double.parseDouble(timeInput.getText());
        int f = switchCaseCompoundFrequencyInput(); // Frequency check
        double n = f * t;
        r = (Math.pow(A / P, 1 / n) - 1) * f; // Formula derived from: A = P(1+i)^n, i = r/f, n = f*t
        return r;
    }

    private double compoundFutureValue(double A) { // Calculations for future value using compound interest
        if (principalValueInput.getText().length() != 0 && interestValueInput.getText().length() != 0) {
            double P = Double.parseDouble(principalValueInput.getText());
            double I = Double.parseDouble(interestValueInput.getText());
            A = P + I; // A = P + I
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nA = P + I"); // Stating used formula
        } else if (principalValueInput.getText().length() != 0 && interestRateInput.getText().length() != 0
                && timeInput.getText().length() != 0) {
            double P = Double.parseDouble(principalValueInput.getText());
            double r = Double.parseDouble(interestRateInput.getText());
            double t = Double.parseDouble(timeInput.getText());
            int f = switchCaseCompoundFrequencyInput(); // Frequency check
            double i = r / f, n = f * t;
            A = P * Math.pow(1 + i, n); // Formula derived from: A = P(1+i)^n, i = r/f, n = f*t
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nA = P(1 + i)^n, i = r / f, n = f * t"); // Stating used formula
        } else if (annuityInput.getText().length() != 0 && interestRateInput.getText().length() != 0
                && timeInput.getText().length() != 0) {
            double R = Double.parseDouble(annuityInput.getText());
            double r = Double.parseDouble(interestRateInput.getText());
            double t = Double.parseDouble(timeInput.getText());
            int f = switchCaseCompoundFrequencyInput(); // Frequency check
            double i = r / f, n = f * t;
            A = R * ((Math.pow(1 + i, n) - 1) / i); // Formula derived from: FV = R(((1+i)^n-1)/i), i = r/f, n = f*t
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nA = R(((1 + i)^n - 1) / i), i = r / f, n = f * t"); // Stating used formula
        }
        return A;
    }

    private double compoundTime(double t) { // Calculations for time using compound interest
        double r = Double.parseDouble(interestRateInput.getText());
        int f = switchCaseCompoundFrequencyInput(); // Frequency check
        double i = r / f;
        if (principalValueInput.getText().length() != 0 && futureValueInput.getText().length() != 0) {
            double P = Double.parseDouble(principalValueInput.getText());
            double A = Double.parseDouble(futureValueInput.getText());
            t = Math.log(A / P) / Math.log(1 + i); // Formula derived from: A = P(1+i)^n, i = r/f, n = f*t
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nt = (log(A / P) / log(1 + i)) / f, i = r / f"); // Stating used formula
        } else if (principalValueInput.getText().length() != 0 && annuityInput.getText().length() != 0) {
            double P = Double.parseDouble(principalValueInput.getText());
            double R = Double.parseDouble(annuityInput.getText());
            t = (Math.log(-(P / R) * i + 1) / Math.log(1 + i)) / f; // Formula derived from: PV = R((1-(1+i)^-n)/i), i = r/f, n = f*t
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nt = (log(-(P / R) * i + 1) / log(1 + i)) / f,\ni = r / f"); // Stating used formula
        } else if (futureValueInput.getText().length() != 0 && annuityInput.getText().length() != 0) {
            double A = Double.parseDouble(futureValueInput.getText());
            double R = Double.parseDouble(annuityInput.getText());
            t = (Math.log((A / R) * i + 1) / Math.log(1 + i)) / f; // Formula derived from: FV = R(((1+i)^n-1)/i), i = r/f, n = f*t
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nt = (log((A / R) * i + 1) / log(1 + i)) / f,\ni = r / f"); // Stating used formula
        }
        return t;
    }

    private double compoundInterestValue(double I) { // Calculations for interest value using compound interest
        if (principalValueInput.getText().length() != 0 && futureValueInput.getText().length() != 0) {
            double P = Double.parseDouble(principalValueInput.getText());
            double A = Double.parseDouble(futureValueInput.getText());
            I = A - P; // Formula derived from: A = P + I
            formulaDisplay.setText(simpleFormulaLegend + "\n\nI = A - P"); // Stating used formula
        } else if (annuityInput.getText().length() != 0 && interestRateInput.getText().length() != 0
                && timeInput.getText().length() != 0) {
            double R = Double.parseDouble(annuityInput.getText());
            double r = Double.parseDouble(interestRateInput.getText());
            double t = Double.parseDouble(timeInput.getText());
            int f = switchCaseCompoundFrequencyInput(); // Frequency check
            // Formula derived from: FV = R(((1+i)^n-1)/i), i = r/f, n = f*t // PV = R((1-(1+i)^-n)/i), i = r/f, n = f*t // I = FV - PV
            double i = r / f, n = f * t;
            I = (R / i) * (Math.pow(1 + i, n) + Math.pow(1 + i, -n) - 2);
            // Stating used formula
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nI = (R / i) * (((1 + i)^n + (1 + i)^(-n)) - 2),\ni = r / f, n = f * t"); 
        }
        return I;
    }

    private double compoundAnnuity(double R) { // Calculations for annuity (compound interest only)
        double r = Double.parseDouble(interestRateInput.getText());
        double t = Double.parseDouble(timeInput.getText());
        int f = switchCaseCompoundFrequencyInput(); // Frequency check
        double i = r / f, n = f * t;
        if (principalValueInput.getText().length() != 0) {
            double P = Double.parseDouble(principalValueInput.getText());
            R = P / ((1 - Math.pow(1 + i, -n)) / i); // Formula derived from: PV = R((1-(1+i)^-n)/i), i = r/f, n = f*t
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nR = P / ((1 - (1 + i)^(-n)) / i), i = r / f, n = f * t"); // Stating used formula
        } else if (futureValueInput.getText().length() != 0) {
            double A = Double.parseDouble(futureValueInput.getText());
            R = A / ((Math.pow(1 + i, n) - 1) / i); // Formula derived from: FV = R(((1+i)^n-1)/i), i = r/f, n = f*t
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nR = F / (((1 + i)^n - 1) / i), i = r / f, n = f * t"); // Stating used formula
        }
        return R;
    }

    private void generalInterestSettings() {
        principalValueButton.setEnabled(true);
        interestRateButton.setEnabled(true);
        futureValueButton.setEnabled(true);
        timeButton.setEnabled(true);
        interestValueButton.setEnabled(true);
        annuityButton.setEnabled(true);
        principalValueInput.setEnabled(false);
        principalValueInput.setText(null);
        interestRateInput.setEnabled(false);
        interestRateInput.setText(null);
        futureValueInput.setEnabled(false);
        futureValueInput.setText(null);
        timeInput.setEnabled(false);
        timeInput.setText(null);
        interestValueInput.setEnabled(false);
        interestValueInput.setText(null);
        annuityInput.setEnabled(false);
        annuityInput.setText(null);
        resetCompoundFrequecnyInput();
        compoundFrequencyInput.setEnabled(false);
        calculateButton.setEnabled(false);
        output.setEnabled(false);
        formulaDisplay.setEnabled(false);
        formulaDisplay.setText(null);
    }

    private void simpleIntrestSettings() { // Disabling compound interest only variables
        annuityInput.setEnabled(false);
        compoundFrequencyInput.setEnabled(false);
    }

    private void compoundInterestSettings() { // Enabling compound interest only variables
        annuityInput.setEnabled(true);
        compoundFrequencyInput.setEnabled(true);
    }

    private void resetCompoundFrequecnyInput() {
        compoundFrequencyInput.removeAll();
        compoundFrequencyInput.add("Annually");         // index 0
        compoundFrequencyInput.add("Semi-annually");    // index 1
        compoundFrequencyInput.add("Quarterly");        // index 2
        compoundFrequencyInput.add("Monthly");          // index 3
        compoundFrequencyInput.add("Bi-weekly");        // index 4
        compoundFrequencyInput.add("Weekly");           // index 5
        compoundFrequencyInput.add("Daily");            // index 6
    }

    private int switchCaseCompoundFrequencyInput() { // Frequency check
        int frequency = 1;
        switch (compoundFrequencyInput.getSelectedIndex()) {
            case 0:
                frequency = 1; // 1 year
                break;
            case 1:
                frequency = 2; // 2 semesters / 1 year
                break;
            case 2:
                frequency = 4; // 4 quarters / 1 year
                break;
            case 3:
                frequency = 12; // 12 months / 1 year
                break;
            case 4:
                frequency = 26; // 26 bi-weeks / 1 year
                break;
            case 5:
                frequency = 52; // 52 weeks / 1 year
                break;
            case 6:
                frequency = 365; // 365 days / 1 year
                break;
            default:
                break;
        }
        return frequency;
    }
    
    private void formula() { // Stating all possible formulas
        formulaDisplay.setEnabled(true);
        if (principalValueButton.isSelected()) { // Principal value formula
            if (simpleInterestButton.isSelected()) {
                formulaDisplay.setText(simpleFormulaLegend + "\n\nP = A - I\n\nP = I / (r * t)\n\nP = A / (1 + r * t)");
            } else {
                formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nP = A - I\n\nP = A(1 + i)^(-n), i = r / f, n = f * t"
                        + "\n\nP = R((1 - (1 + i)^(-n)) / i),\ni = r / f, n = f * t");
            }
        } else if (interestRateButton.isSelected()) { // Interest rate formula
            if (simpleInterestButton.isSelected()) {
                formulaDisplay.setText(simpleFormulaLegend + "\n\nr = I / (P * t)\n\nr = (A / P - 1) / t\n\nr = (I / t) / (A - I)");
            } else {
                formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nr = ((A / P)^(1 / n) - 1) * f,\ni = r / f, n = f * t");
            }
        } else if (futureValueButton.isSelected()) { // Future value formula
            if (simpleInterestButton.isSelected()) {
                formulaDisplay.setText(simpleFormulaLegend + "\n\nA = P + I\n\nA = P + P(r * t) -> A = P(1 + r * t)\n\nA = (I / t) / r + I");
            } else {
                formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nA = P + I\n\nA = P(1 + i)^n, i = r / f, n = f * t"
                        + "\n\nA = R(((1 + i)^n - 1) / i), i = r / f, n = f * t");
            }
        } else if (timeButton.isSelected()) { // Time formula
            if (simpleInterestButton.isSelected()) {
                formulaDisplay.setText(simpleFormulaLegend + "\n\nt = I /(r * P)\n\nt = (A / P - 1) / r\n\nt = I / (r * (A - I))");
            } else {
                formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nt = (log(A / P) / log(1 + i)) / f, i = r / f"
                        + "\n\nt = (log(-(P / R) * i + 1) / log(1 + i)) / f,\ni = r / f"
                        + "\n\nt = (log((A / R) * i + 1) / log(1 + i)) / f,\ni = r / f");
            }
        } else if (interestValueButton.isSelected()) { // Interest value formula
            if (simpleInterestButton.isSelected()) {
                formulaDisplay.setText(simpleFormulaLegend + "\n\nI = A - P\n\nI = P * r * t");
            } else {
                formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nI = A - P\n\nI = (R / i) * (((1 + i)^n + (1 + i)^(-n)) - 2),"
                        + "\ni = r / f, n = f * t");
            }
        } else { // Annuity formula
            formulaDisplay.setText(simpleFormulaLegend + "\nAnnuity = R\nFrequency = f\n\nR = P / ((1 - (1 + i)^(-n)) / i), i = r / f, n = f * t"
                    + "\n\nR = A / (((1 + i)^n - 1) / i), i = r / f, n = f * t");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormFinancialCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FormFinancialCalculator().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton annuityButton;
    private javax.swing.JTextField annuityInput;
    private javax.swing.JButton calculateButton;
    private javax.swing.ButtonGroup calculation;
    private javax.swing.JButton clearButton;
    private java.awt.Choice compoundFrequencyInput;
    private javax.swing.JRadioButton compoundInterestButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JTextArea formulaDisplay;
    private javax.swing.JRadioButton futureValueButton;
    private javax.swing.JTextField futureValueInput;
    private javax.swing.JRadioButton interestRateButton;
    private javax.swing.JTextField interestRateInput;
    private javax.swing.JRadioButton interestValueButton;
    private javax.swing.JTextField interestValueInput;
    private javax.swing.ButtonGroup intrestType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea output;
    private javax.swing.JRadioButton principalValueButton;
    private javax.swing.JTextField principalValueInput;
    private javax.swing.JRadioButton simpleInterestButton;
    private javax.swing.JRadioButton timeButton;
    private javax.swing.JTextField timeInput;
    private javax.swing.ButtonGroup timeSetting;
    // End of variables declaration//GEN-END:variables
}
